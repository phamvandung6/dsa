1.18

    1:
    // Vòng lặp chạy n lần
    for(i = 1; i <= n; i++)
        // hằng số c0
        m = m + 2
    
    -> Tổng thời gian chạy: c0 * n = Θ (n)

    2:
    // Vòng lặp ngoài chạy n lần
    for (i = 1; i <= n; i++) {
        // Vòng lặp con chạy n lần
        for (j = 1; j <= n; j++) {
            // Hằng số c0
            k = k + 1
        }
    }
    
    -> Tổng thời gian chạy: c0 * n * n = Θ (n^2)

    3:
    // Hằng số c0
    x = x + 1
    // Vòng lặp chạy n lần
    for (i = 1; i <= n; i++)
        //Hằng số c1
        m = m + 2
    //Vòng lặp chạy n lần
    for (i = 1; i <= n; i++)
        //Vòng lặp chạy n lần
        for (j = 1; j <= n; j++)
            //Hằng số c2
            k = k + 1

    -> Tổng thời gian chạy: c0 + n * c1 + n * n * c2 = Θ (n^2)

    4:
    // Hằng số c0
    if (length() == 0) {
        // Hằng số c1
        return false;
    }
    else {
        // Vòng lặp n lần
        for (int n = 0; n <= length(); n++) {
            //Hằng số c2
            if (!list[n].equals(otherList[n])) {
                //Hằng số c3
                return false;
            }
        }
    }

    -> Tổng thời gian chạy: c0 + c1 + n * (c2 + c3)

    5:
    for (i = 1; i <= n)
        i = i * 2
    
    -> Tổng thời gian chạy: Θ (logn)

1.23
    1.
    T(n) = 3T(n/2) + n^2
    => T(n) = Θ (n^2)

    2.
    T(n) = 4T(n/2) + n^2
    => T(n) = Θ (n^2 * logn)

    3.
    T(n) = T(n/2) + n^2
    => T(n) = Θ (n^2)

    4.
    T(n) = 2^n * T(n/2) + n^n
    => Không áp dụng được Master Theorem

    5.
    T(n) = 16T(n/4) + n
    => T(n) = Θ (n^2)

    6.
    T(n) = 2T(n/2) + nlogn
    => T(n) = Θ (n * log^2(n))

    7.
    T(n) = 2T(n/2) + n/log(n)
    => T(n) = Θ (nloglogn)

    8.
    T(n) = 2T(n/4) + n^0.51
    => T(n) = Θ (n^0.51)

    9.
    T(n) = 0.5T(n/2) + 1/n
    => Không áp dụng được Master Theorem

    10.
    T(n) = 6T(n/3) + n^2logn
    => T(n) = Θ (n^2logn)

    11.
    T(n) = 64T(n/8) - n^2 * log(n)
    => T(n) = Θ (n^2 * log(n))

    12.
    T(n) = 7T(n/3) + n^2
    => T(n) = Θ (n^2)

    13.
    T(n) = 4T(n/2) + log(n)
    =>T(n) = Θ (n^2)

    14.
    T(n) = 16T(n/4) + n!
    => T(n) = Θ (n!)

    15.
    T(n) = sqrt(2)T(n/2) + log(n)
    => T(n) = Θ (sqrt(n))

    16.
    T(n) = 3T(n/2) + n
    => T(n) = Θ (n^(log3))

    17.
    T(n) = 3T(n/3) + sqrt(n)
    => T(n) = Θ (n)

    18.
    T(n) = 4T(n/2) + cn
    => T(n) = Θ (n^2)

    19.
    T(n) = 3T(n/4) + nlog(n)
    => T(n) = Θ (nlog(n))

    20.
    T(n) = 3T(n/3 + n/2)
    => T(n) = Θ (nlog(n))

1.28
    22.
    T(n) = 2T(n - 1) - 1    if n > 0
    T(n) = 1                otherwise

    T(n) = 2T(n - 1) - 1
         = 2(2T(n - 2) - 1) - 1 = 2^2 * T(n - 2) - 2 - 1
         = 2^n * T(n - n) - 2^(n - 1) - 2^(n - 2) - ... - 2^1 - 2^0
         = 2^n - 2^(n - 1) - 2^(n - 2) - ... - 2^1 - 2^0
         = 2^n - (2^n - 1)
         = 1

    Vậy độ phức tạp là O (1)

    23.
    public void Function(int n) {
        int i=1, s=1;
        while (s <= n) {
            i++;
            s = s + i;
            System.out.println(“*");
        }
    }
    Ban đầu, i=1 và s=1. Mỗi lần lặp, i tăng lên 1 và s tăng thêm i. 
    Chúng ta cần tìm giá trị của i nhỏ nhất khi s vượt quá n (i cũng là số lần lặp)
    Giả sử sau i lần lặp, s vượt quá n.
    Khi đó:
        1 + 2 + 3 + ... + i >= n
        Suy ra i(i+1)/2 >= n
        => i = O(sqrt(n))
    
    24.
    public void function(int n) {
        int i, count =0;
        for(i=1; i*i<=n; i++)
            count++;
    }
    Vòng lặp chỉ chạy sqrt(n) lần nên độ phức tạp của nó là O(sqrt(n))

    25.
    public void function(int n) {
        int i, j, k , count =0;
        //Vòng lặp chạy n/2 lần
        for(i=n/2; i<=n; i++)
            //Vòng lặp chạy n/2 lần 
            for(j=1; j + n/2<=n; j++)
                //Vòng lặp chạy log(n) lần
                for(k=1; k<=n; k= k * 2)
                    count++;
    }
    Vậy độ phức tạp là O(n^2 * log(n))

    26.
    public void function(int n) {
        int i, j, k , count =0;
        //Vòng lặp chạy n/2 lần
        for(i=n/2; i<=n; i++)
            //Vòng lặp chạy log(n) lần
            for(j=1; j<=n; j= 2 * j)
                //Vòng lặp chạy log(n) lần
                for(k=1; k<=n; k= k * 2)
                    count++;
    }
    Vậy độ phức tạp là O(n * log^2(n))

    27.
    public void function( int n ) {
    //Hằng số
    if(n == 1) return;
        //Vòng lặp chạy n lần
        for(int i = 1 ; i <= n ; i + + ) {
            //Vòng lặp chạy 1 lần vì bị break
            for(int j= 1 ; j <= n ; j + + ) {
                System.out.println(“*" );
                break;
            }
        }
    }
    Vậy độ phức tạp là O(n)

    28.
    public void function( int n ) {
    //Hằng số
    if( n == 1 ) return;
    //Vòng lặp chạy n lần
    for(int i = 1 ; i <= n ; i + + )
        //Vòng lặp chạy n lần
        for(int j = 1 ; j <= n ; j + + )
            System.out.println(“*" ) ;
        function( n-3 );
    }

    Ta có: T(n) = T(n - 3) + c*n^2  
    => T(n) = Θ (n^3) theo master theorem